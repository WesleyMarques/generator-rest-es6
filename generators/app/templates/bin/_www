#!/usr/bin/env node

/*jshint esversion: 6*/
/**
 * Module dependencies.
 */

import app from '../app';
import debug from 'debug';
import http from 'http';

const log = debug('<%= appName %>:server');
const logError = debug('<%= appName %>:error:server');
logError.color = 1;
log.color = 2;

var onListening = () => {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	log('Listening on %s', bind);
};

/**
 * Normalize a port into a number, string, or false.
 */

var normalizePort = (val) => {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
};

var onError = (error) => {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logError('%s requires elevated privileges', bind);
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logError('%s is already in use', bind);
			process.exit(1);
			break;
		default:
			throw error;
	}
};


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || app.config.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
